[
    {
        "question": "右側程式，請問程式的輸出結果為何？",
        "code": "s = 1\n\ndef func(a):\n    s = 2\n    a = 4\n\nfunc(s)\nprint(s)\ns = 3\nprint(s)\n",
        "options": [
            "A. 12",
            "B. 13",
            "C. 22",
            "D. 44"
        ],
        "answer": "B. 13",
        "keywords": ["程式碼分析", "全域變數", "區域變數"],
        "explanation": "\n1. 初始化變數 `s` 為 1。\n2. 呼叫函式 `func` 並傳入 `s`（值為 1），函式內部的區域變數 `s` 不影響全域變數。\n3. 第一次輸出全域變數 `s` 的值為 1。\n4. 修改全域變數 `s` 為 3。\n5. 第二次輸出全域變數 `s` 的值為 3。"
    },   
    {
        "question": "有一程式如右所示，求程式的輸出值為何？",
        "code": "count = 12\nif count > 10:\n    count = 11\nelif count < 12:\n    count = 10\n    if count % 10 == 0:\n        count = 13\n    else:\n        count = 14\nif count == 11:\n    count = 10\nelif count == 13:\n    count = 14\n    if count % 10 == 4:\n        count = 13\nelif count > 13:\n    count = 12\n\nprint(count)",
        "options": [
            "A. 13",
            "B. 12",
            "C. 11", 
            "D. 10"
        ],
        "answer": "D. 10",
        "keywords": ["Python", "if-else", "條件判斷"],
        "explanation": "\n1. 初始化變數 `count` 為 12。\n2. 第一層 `if` 條件檢查：\n   -> `count > 10` 成立，將 `count` 設為 11。\n3. 第二層條件檢查：\n   -> `if count == 11` 成立，將 `count` 設為 10。\n4. 其餘條件不成立，跳過。\n5. 最終輸出變數 `count` 的值為 10。"
    },
    {
        "question": "當右側程式執行時，請問輸出的陣列元素分別是多少？",
        "code": "arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nfor i in range(0, 10):\n    arr[(i + i) % 7] = i\nprint(arr)",
        "options": [
            "A. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
            "B. [7, 4, 8, 5, 9, 6, 3, 0, 0, 0]",
            "C. [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
            "D. 發生錯誤，無法輸出"
        ],
        "answer": "B. [7, 4, 8, 5, 9, 6, 3, 0, 0, 0]",
        "keywords": ["陣列操作", "索引計算", "餘數運算"],
        "explanation": "\n1. 初始化陣列 `arr` 為 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]。\n2. 迴圈執行範圍為 `range(0, 10)`，因此 `i` 的值為 0 到 9。\n3. 在每次迴圈中，計算 `(i + i) % 7`，作為陣列的索引，並將當前的 `i` 賦值給該索引位置。\n4. 運算結果為：\n   - 當 i = 0，索引為 (0+0) % 7 = 0，arr[0] = 0。\n   - 當 i = 1，索引為 (1+1) % 7 = 2，arr[2] = 1。\n   - 當 i = 2，索引為 (2+2) % 7 = 4，arr[4] = 2。\n   - 依此類推，最後一次迴圈 i = 9，索引為 (9+9) % 7 = 4，覆蓋先前的值。\n5. 最終輸出的陣列為 [7, 4, 8, 5, 9, 6, 3, 0, 0, 0]。"
    },
    {
        "question": "有一函式 func 如右所示，求 func(7,4) 返回的值為何？",
        "code": "def func(a, b):\n    s = 0\n    if a > b:\n        t = a\n        a = b\n        b = t\n    for i in range(0, a):\n        for j in range(i, b):\n            s += j\n    return s\n",
        "options": [
            "A. 80",
            "B. 130",
            "C. 發生錯誤，無法執行。",
            "D. 以上皆非"
        ],
        "answer": "A. 80",
        "keywords": ["Python", "函式", "巢狀迴圈", "參數交換"],
        "explanation": "\n1. 定義函式 `func(a, b)`，並初始化變數 `s` 為 0。\n2. 如果 `a > b`，交換 `a` 和 `b` 的值，確保 `a <= b`。\n3. 使用巢狀迴圈計算：\n    - 外層迴圈範圍為 `0` 到 `a`。\n    - 內層迴圈範圍為當前 `i` 到 `b`。\n    - 在內層迴圈中，將 `j` 累加至 `s`。\n4. 當呼叫 `func(7,4)` 時，執行結果為 `s = 80`。\n5. 最終返回 `s` 的值為 `80`。"
    },  
    {
        "question": "有一題題函式 R 如右所示，如果以 R(3,17,0) 執行，則會印出什麼結果？",
        "code": "def R(x, y, s):\n    t = int((x + y) / 2)\n    s = s + t\n    if x < y:\n        if 5 >= t:\n            R(t, y, s)\n        else:\n            R(x, y - 5, s)\n    else:\n        print(s)",
        "options": [
            "A. 24",
            "B. 27",
            "C. 31",
            "D. 34"
        ],
        "answer": "C. 31",
        "keywords": ["遞迴", "條件判斷", "數值計算"],
        "explanation": "\n1. 初始化參數 `x=3`, `y=17`, `s=0`，進入函式。\n2. 第一次計算 `t=(3+17)/2=10`，`s=s+t=0+10=10`，進入條件。\n3. 因 `x < y` 且 `5 >= t` 不成立，執行 `R(x, y-5, s)`，即 `R(3, 12, 10)`。\n4. 第二次計算 `t=(3+12)/2=7`，`s=s+t=10+7=17`，再次進入條件。\n5. 因 `x < y` 且 `5 >= t` 不成立，執行 `R(x, y-5, s)`，即 `R(3, 7, 17)`。\n6. 第三次計算 `t=(3+7)/2=5`，`s=s+t=17+5=22`，進入條件。\n7. 因 `x < y` 且 `5 >= t` 成立，執行 `R(t, y, s)`，即 `R(5, 7, 22)`。\n8. 最後一次計算 `t=(5+7)/2=6`，`s=s+t=22+6=31`，進入條件。\n9. 因 `x >= y`，結束遞迴並輸出 `s=31`。"
    },
    {
        "question": "請問下列程式碼執行後的輸出為何？",
        "code": "a = 100\n\ndef fn():\n    global a\n    a = 1\n\nprint(a)\nfn()\nprint(a)",
        "options": [
            "A. 100 100",
            "B. 1 1",
            "C. 1 100",
            "D. 100 1"
        ],
        "answer": "D. 100 1",
        "keywords": ["Python", "global", "變數作用域"],
        "explanation": "\n1. 初始化變數 `a = 100`，這是一個全域變數，值為 100。\n2. 第一個 `print(a)`：直接輸出全域變數 `a` 的值，為 100。\n3. 呼叫函式 `fn()`：\n   - 在函式內聲明 `global a`，這使得函式內的 `a` 直接指向全域變數 `a`。\n   - 將全域變數 `a` 的值設為 1。\n4. 第二個 `print(a)`：此時，全域變數 `a` 已被函式 `fn()` 修改為 1，輸出值為 1。\n5. 總結輸出結果依次為：100 和 1。"
    },
    {
        "question": "請問下列程式碼執行後的輸出為何？",
        "code": "print(sum(range(100)))",
        "options": [
            "A. 100",
            "B. 0",
            "C. 4950",
            "D. 5050"
        ],
        "answer": "C. 4950",
        "keywords": ["Python", "sum", "range", "數值運算"],
        "explanation": "\n小技巧：使用算術級數公式 `(首項 + 末項) * 項數 / 2` 快速計算連續整數的和。\n\n1. `range(100)` 生成一個從 0 到 99 的數字序列（包含 0，但不包含 100）。\n2. 使用 `sum()` 函數計算這些數字的總和。\n3. 這些數字的和可以寫成：0 + 1 + 2 + ... + 99。\n4. 利用算術級數求和公式 `(首項 + 末項) * 項數 / 2`，可得出總和為 `(0 + 99) * 100 / 2 = 4950`。\n5. 因此，程式碼執行後的輸出為 4950。"
    },
    {
        "question": "請問下列程式碼執行後的輸出為何？",
        "code": "import numpy as np\n\nnp1 = np.array([6, 5, 4, 3, 2, 1])\n\nnp2 = np1.reshape(3, 2)\n\nprint(np2.sum(axis=1))",
        "options": [
            "A. 6",
            "B. [15 6]",
            "C. [11 7 3]",
            "D. 21"
        ],
        "answer": "C. [11 7 3]",
        "keywords": ["Python", "NumPy", "reshape", "sum", "陣列運算"],
        "explanation": "\n1. 使用 `numpy` 來建立一個陣列 `np1`，其元素為 `[6, 5, 4, 3, 2, 1]`。\n2. 使用 `reshape(3, 2)` 將原本 1 維的 `np1` 陣列轉換為 3 行 2 列的 2 維陣列 `np2`，結果為：\n   ```\n   [[6, 5],\n    [4, 3],\n    [2, 1]]\n   ```\n3. 使用 `np2.sum(axis=1)` 來計算每一行的元素和：\n   - 第一行的和：`6 + 5 = 11`\n   - 第二行的和：`4 + 3 = 7`\n   - 第三行的和：`2 + 1 = 3`\n4. 最終輸出為 `[11 7 3]`。"
    },
    {
        "question": "請問下列程式碼執行後的輸出為何？",
        "code": "import numpy as np\n\nnp1 = np.array([6, 5, 4, 3, 2, 1])\n\nprint(np1[np1 % 3 == 1])",
        "options": [
            "A. [4 1]",
            "B. [6 4 2]",
            "C. [4]",
            "D. [5 2]"
        ],
        "answer": "A. [4 1]",
        "keywords": ["Python", "NumPy", "條件篩選", "模數運算"],
        "explanation": "\n1. 使用 `numpy` 建立一個陣列 `np1`，其內容為 `[6, 5, 4, 3, 2, 1]`。\n2. 條件篩選 `np1[np1 % 3 == 1]` 的含義：\n   - 對陣列中的每個元素計算 `元素 % 3`，結果為 `[0, 2, 1, 0, 2, 1]`。\n   - 篩選出餘數等於 1 的元素，對應的元素為 `4` 和 `1`。\n3. 最終輸出為 `[4 1]`。"
    },
    {
        "question": "請問下列程式碼執行後的輸出為何？",
        "code": "def a(v1):\n    def b(v2):\n        return v1 ** v2\n    return b\n\na1 = a(5)\nprint(a1(3))",
        "options": [
            "A. 125",
            "B. 25",
            "C. 9",
            "D. 15"
        ],
        "answer": "A. 125",
        "keywords": ["Python", "函式", "巢狀函式", "閉包"],
        "explanation": "\n1. 定義函式 `a(v1)`，其內部定義了另一個函式 `b(v2)`，該函式返回 `v1 ** v2`。\n2. 函式 `a` 返回的是內部函式 `b`，這意味著 `a1` 將成為函式 `b`，並且捕獲了外部變數 `v1 = 5`。\n3. 呼叫 `a1(3)` 時，相當於呼叫 `b(3)`，計算 `5 ** 3`。\n4. `5 ** 3` 等於 `125`。\n5. 最終輸出為 `125`。"
    },
    {
        "question": "QC 假設有兩個條件所運算出的布林值 A 與 B，請回答以下哪一項條件運算式正確？(select two or all)\n1. 若想要同時滿足 A、B 兩個條件時，應該使用 。\n2. 若想要滿足 A 或 B 的條件時，應該使用。\n3. 若想要滿足 A，但不滿足 B 的條件時，應該使用。\n4. 若想要不滿足 A，也不滿足 B 的條件時，應該使用。",
        "code": "if ____Q1____:\n    # Q1: 同時滿足 A、B 兩個條件時要執行的內容\n    ...\n\nif ____Q2____:\n    # Q2: 滿足 A、B 其中一個條件時要執行的內容\n    ...\n\nif ____Q3____:\n    # Q3: 滿足 A 但不滿足 B 時要執行的內容\n    ...\n\nif ____Q4____:\n    # Q4: 不滿足 A、也不滿足 B 時要執行的內容\n    ...",
        "options": [
            "1. A and B",
            "2. A or B",
            "3. A and not B",
            "4. not A and not B"
        ],
        "answer": [
            "1. A and B",
            "2. A or B",
            "3. A and not B",
            "4. not A and not B"
        ],
        "keywords": ["布林運算", "邏輯運算", "條件運算"],
        "explanation": "問題涉及布林值 A 與 B 的邏輯運算，包括 AND、OR、NOT 等基本邏輯運算的應用。每個選項對應的答案顯示了如何組合運算子來達成特定條件。範例程式碼顯示如何使用 Python 撰寫這些條件運算的邏輯。"
    }
    
]